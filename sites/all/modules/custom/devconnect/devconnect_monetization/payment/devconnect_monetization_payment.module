<?php

use Apigee\Commerce\Organization as Organization;
use Apigee\Commerce\Developer as Developer;
use Apigee\Commerce\DataStructures\Address as Address;
use Apigee\Commerce\Exceptions\CommerceApiException as CommerceApiException;

function devconnect_monetization_payment_menu() {
  $items['users/me/monetization/top-up-balance'] = array(
    'title'            => 'Confirm Override Plan',
    'title callback'   => 't',
    'page callback'    => 'devconnect_monetization_payment_purchase',
    'page arguments'   => array('devconnect_monetization_payment_purchase'),
    'access callback'  => TRUE, // @TODO Validate access control
    'access arguments' => array(1, 4),
    'type'             => MENU_CALLBACK,
    'weight'           => -1,
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function devconnect_monetization_payment_form_commerce_checkout_form_checkout_alter(&$form, &$form_state) {

  $country_callback = &$form['customer_profile_billing']['commerce_customer_address'][LANGUAGE_NONE][0]['country']['#ajax'];

  $country_callback['effect'] = 'slide';
  $country_callback['prevent'] = 'click';

  $form['#attributes']['class'][] = 'form-horizontal';
  $form['#attached']['js'][] = drupal_get_path('module', 'devconnect_monetization_payment') . '/js/devconnect_monetization_payment.js';

  if ($GLOBALS['devconnect_monetization_test_user_enabled']) {
    $developer_id = _devconnect_monetization_get_developer_id();
    $user = user_load_by_mail($developer_id);
  }
  else {
    global $user;
  }

  $account = entity_load('user', array($user->uid));
  $account = $account[$user->uid];

  drupal_add_js(drupal_get_path('module', 'devconnect_monetization') . '/js/global.js', 'file');
  $developer_id = _devconnect_monetization_get_developer_id();
  $client = devconnect_monetization_default_api_client();
  $developer = new Developer($client);

  $developer->load($developer_id);

  foreach ($developer->getAddresses() as $address_item) {
    if (is_array($address_item) && $address['isPrimary'] || $address_item->isPrimary()) {
      $address = is_array($address_item) ? (object)$address_item : $address_item;
      break;
    }
  }

  if (is_object($address)) {
    $address_profile = &$form['customer_profile_billing']['commerce_customer_address'][LANGUAGE_NONE][0]['#address'];
    $address_profile['name_line'] = $developer->getLegalName();
    $address_profile['thoroughfare'] = $address->getAddress1();
    $address_profile['premise'] = $address->getAddress2();
    $address_profile['locality'] = $address->getCity();
    $address_profile['first_name'] = $account->field_first_name[LANGUAGE_NONE][0]['value'];
    $address_profile['last_name'] = $account->field_last_name[LANGUAGE_NONE][0]['value'];
    $address_profile['organisation_name'] = $developer->getClient()->getOrg();
    $address_profile['administrative_area'] = $address->getState();
    $address_profile['postal_code'] = $address->getZip();
    if ($address->getCountry() != 'AF') {
      drupal_add_js('jQuery(function($){$("#edit-continue").attr("disabled", true); $("select[name=\'customer_profile_billing[commerce_customer_address][und][0][country]\']").val("' . strtoupper($address->getCountry()) . '").trigger("change");});', 'inline');
    }
  }
}

function devconnect_monetization_payment_commerce_payment_order_paid_in_full($order, $transaction) {

    switch ($transaction->status) {
      case COMMERCE_PAYMENT_STATUS_SUCCESS:
        // We will allow hook_commerce_checkout_complete to manage the update
        // in Commerce API backend until we identify the issue with decimal points.
        // Until then we will return from this hook
        return;
        try {
          try {
            $developer_id = _devconnect_monetization_get_developer_id();
            $client = devconnect_monetization_default_api_client();
            $developer = new Developer($client);
            $developer->load($order->mail);
            $developer->topUpPrepaidBalance(
                strtolower($transaction->currency_code),
                $transaction->amount/100,
                $transaction->changed);
            $vars = array(
              '%developer' => $developer_id,
              '%email' => $order->mail,
              '%amount' => sprintf('%.2f', $transaction->amount/100),
              '%currency' => $transaction->currency_code,
            );
            watchdog('devconnect_monetization_wp', 'Developer %developer with %email has topped up %amount %currency to his balance and updated Commerce back end.', $vars, WATCHDOG_INFO);
            drupal_set_message(t('You have topped up @amount @currency to your balance.', array(
                               '@amount' => sprintf('%.2f', $form_state['values']['top_up_amount']/100),
                               '@currency' => $form_state['values']['currency_id']
                               )), 'status');
          }
          catch(CommerceApiException $e) {
            if ($GLOBALS['devconnect_monetization_debug_endpoint_response']) {
              watchdog_exception('devconnect_monetization_wp', 'DEBUG: ' . $ce->getCommerceMessage(TRUE), array(), WATCHDOG_CRITICAL);
            }
            watchdog_exception('devconnect_monetization_wp', $ce->getPrevious(), $ce->getCode(), array(), WATCHDOG_CRITICAL);
            throw $e;
          }
        }
        catch(Exception $e) {
          // If $e instance of Apigee\Commerce\Exceptions\CommerceApiException, then log entries
          // have been already managed in the inner try/catch, if not then log it in here
          if (!is_a($e, 'Apigee\Commerce\Exceptions\CommerceApiException')) {
            watchdog_exception('devconnect_monetization_wp', $e, $e->getMessage(), array(), WATCHDOG_CRITICAL);
          }
          // Queue the message to ask the developer to contact an administrator
          drupal_set_message(t('There was an error trying to complete your transaction. Please contact your adminstrator.'), 'error');
        }
        break;
      case COMMERCE_PAYMENT_STATUS_PENDING:
        watchdog('devconnect_monetization_wp', 'Developer %developer with %email has topped up %amount %currency to his balance but is pending for authorization no update to Commerce back end has been performed.', $vars, WATCHDOG_INFO);
        drupal_set_message(t('Your top up for @amount @currency is pending for authorization.', array(
                '@amount' => sprintf('%.2f', $form_state['values']['top_up_amount']/100),
                '@currency' => $form_state['values']['currency_id']
            )), 'status');
        break;
      case COMMERCE_PAYMENT_STATUS_FAILURE:
        watchdog('devconnect_monetization_wp', 'Developer %developer with %email has failed or was rejected top up %amount %currency to his balance.', $vars, WATCHDOG_WARNING);
        drupal_set_message(t('Your top up for @amount @currency has failed or was rejected.', array(
                '@amount' => sprintf('%.2f', $form_state['values']['top_up_amount']/100),
                '@currency' => $form_state['values']['currency_id']
            )), 'error');
        break;
    }
}

function devconnect_monetization_payment_theme ($existing, $type, $theme, $path) {
  $items = array();
  $template_path = drupal_get_path('module', 'devconnect_monetization_payment') . '/templates';

  $items['devconnect_monetization_payment_review_pane_1'] = array(
      'template'  => 'review-pane-1',
      'arguments' => array('application_count' => 0, 'applications' => '', 'user' => NULL),
      'path'      => $template_path
  );

  return $items;
}

function devconnect_monetization_payment_commerce_checkout_pane_info(){
  $panes = array();
  $panes['devconnect_monetization_payment_review_top_up_details_pane'] = array(
    'title' => 'Top up details',
    'page' => 'review',
    'enabled' => TRUE,
    'review' => FALSE,
    'fieldset' => TRUE,
    'collapsible' => FALSE,
    'collapsed' => FALSE,
    'base' => 'devconnect_monetization_payment_review_top_up_details_pane',
  );
  return $panes;
}

function devconnect_monetization_payment_review_top_up_details_pane_checkout_form(&$form, $form_state, $checkout_pane, $order) {

  $client = devconnect_monetization_default_api_client();
  $org = new Organization($client);
  $org->load($client->getOrg());

  $variables = array(
    'order' => $order,
    'api_provider' => $org->getDescription(),
  );



  $form = array();
  $form['review_pane_1'] = array(
    '#type' => 'item',
    '#markup' => theme('devconnect_monetization_payment_review_pane_1', $variables),
  );
  $form['#attached']['js'][] = drupal_get_path('module', 'devconnect_monetization_payment') . '/js/devconnect_monetization_payment.js';
  return $form;
}

function devconnect_monetization_payment_commerce_checkout_complete($order) {
  switch ($order->status) {
    case 'checkout_complete':
      try {
        try {
          $developer_id = _devconnect_monetization_get_developer_id();
          $client = devconnect_monetization_default_api_client();
          $developer = new Developer($client);
          $developer->load($order->mail);

          $amount = $order->commerce_order_total[LANGUAGE_NONE][0];

          $query = new EntityFieldQuery;
          $transactions = $query
            ->entityCondition('entity_type', 'commerce_payment_transaction')
            ->propertyCondition('order_id', $order->order_id)
            ->propertyOrderBy('transaction_id', 'DESC')
            ->range(0, 1)
            ->execute();

          list($trans_id) = array_keys($transactions['commerce_payment_transaction']);
          $transaction = commerce_payment_transaction_load($trans_id);

          watchdog('transaction_complete', '<pre>'.print_r($transaction, TRUE).'</pre>', null, WATCHDOG_DEBUG);
          $developer->topUpPrepaidBalance(
              strtolower($amount['currency_code']),
              $amount['amount']/100,
              $transaction->payload[$transaction->revision_timestamp]['desc'],
              $transaction->remote_id
            );

          $vars = array(
            '%developer' => $developer_id,
            '%email' => $order->mail,
            '%amount' => sprintf('%.2f', $amount['amount']/100),
            '%currency' =>$amount['currency_code'],
          );
          watchdog('devconnect_monetization_wp', "Checkout complete:\r\n<pre>".print_r($order, TRUE).'</pre>', null, WATCHDOG_DEBUG);
          watchdog('devconnect_monetization_wp', 'Developer %developer with %email has topped up %amount %currency to his balance and updated Commerce back end.', $vars, WATCHDOG_INFO);
          drupal_set_message(t('You have topped up @amount @currency to your balance.', array(
                             '@amount' => sprintf('%.2f', $form_state['values']['top_up_amount']/100),
                             '@currency' => $amount['currency_code']
                             )), 'status');
        }
        catch(CommerceApiException $e) {
          if ($GLOBALS['devconnect_monetization_debug_endpoint_response']) {
            watchdog_exception('devconnect_monetization_wp', 'DEBUG: ' . $ce->getCommerceMessage(TRUE), array(), WATCHDOG_CRITICAL);
          }
          watchdog_exception('devconnect_monetization_wp', $ce->getPrevious(), $ce->getCode(), array(), WATCHDOG_CRITICAL);
          throw $e;
        }
      }
      catch(Exception $e) {
        // If $e instance of Apigee\Commerce\Exceptions\CommerceApiException, then log entries
        // have been already managed in the inner try/catch, if not then log it in here
        if (!is_a($e, 'Apigee\Commerce\Exceptions\CommerceApiException')) {
          watchdog_exception('devconnect_monetization_wp', $e, $e->getMessage(), array(), WATCHDOG_CRITICAL);
        }
        // Queue the message to ask the developer to contact an administrator
        drupal_set_message(t('There was an error trying to complete your transaction. Please contact your adminstrator.'), 'error');
      }
      break;
    default:
      watchdog('devconnect_monetization_wp', "checkout_complete fired with order deteails: \r\n %order", array('%order' => '<pre>' . print_r($order, TRUE) . '</pre>'), WATCHDOG_INFO);
      break;
  }
}
