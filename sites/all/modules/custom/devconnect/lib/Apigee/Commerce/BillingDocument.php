<?php
namespace Apigee\Commerce;

use Apigee\Commerce\Types\MonthType;
use Apigee\Commerce\DataStructures\BillingMonth as BillingMonth;
use \Apigee\Exceptions\ParameterException as ParameterException;
use \Apigee\Util\Log as Log;

class BillingDocument extends Base\BaseObject {

  /**
   * @var \Apigee\Commerce\Organization
   */
  private $organization;

  /**
   * @var array \Apigee\Commerce\Product
   */
  private $product;

  /**
   * @var array \Apigee\Commerce\Organization
   */
  private $sub_org;

  /**
   * @var array \Apigee\Commerce\Developer
   */
  private $developer;

  /**
   * @var \Apigee\Commerce\Developer
   */
  private $billable_developer;

  /**
   * @var \Apigee\Commerce\Organization
   */
  private $billable_exchange_org;

  /**
   * @var string
   */
  private $start_date;

  /**
   * @var string
   */
  private $end_date;

  /**
   * @var string
   */
  private $billing_month;

  /**
   * @var int
   */
  private $billing_year;

  /**
   * @var string
   */
  private $status;

  /**
   * @var string
   */
  private $type;

  /**
   * @var string
   */
  private $document_number;

  /**
   * @var string
   */
  private $currency;

  /**
   * @var double
   */
  private $amount;

  /**
   * @var double
   */
  private $tax_amount;

  /**
   * @var string
   */
  private $due_date;

  /**
   * @var string
   */
  private $batch_id;

  /**
   * @var string
   */
  private $payment_due_days;

  /**
   * @var string
   */
  private $billing_doc_date;

  /**
   * @var string
   */
  protected $id;

  private $file;

  private $file_mime_type;

  public function __construct(\Apigee\Util\APIClient $client) {
    $this->init($client);

    $this->base_url = '/commerce/organizations/' . rawurlencode($client->getOrg()) . '/billing-documents';
    $this->wrapper_tag = 'billingDocument';
    // TODO: verify the following two items when docs are fleshed out
    $this->id_field = 'id';
    $this->id_is_autogenerated = TRUE;

    $this->initValues();
  }

public function getBillingDocuments($developer_id, $billing_month, $billing_year, $received = TRUE, $all = FALSE) {
    $dev_criteria = new \stdClass();
    $dev_criteria->id = $developer_id;
    $dev_criteria->orgId = $this->client->getOrg();

    $comm_criteria = new \stdClass();
    $comm_criteria->billingMonth = $billing_month;
    $comm_criteria->billingYear = $billing_year;
    $comm_criteria->devCriteria = array($dev_criteria);

    $received = (bool)$received ? 'true' : 'false';
    $all = (bool)$all ? 'true' : 'false';

    $query = 'received=' . $received . '&all=' . $all;
    $url = '/commerce/organizations/' . rawurlencode($this->client->getOrg()) . '/search-billing-documents?' . $query;

    $content_type = 'application/json; charset=utf-8';
    $accept_type = 'application/octet-stream; charset=utf-8';

    $this->client->post($url, json_encode($comm_criteria), $content_type);
    $response = $this->client->getResponse();
    $docs = array();
    foreach ($response[$this->wrapper_tag] as $doc) {
      $bill_doc = new BillingDocument($this->client);
      $bill_doc->loadFromRawData($doc);
      $docs[] = $bill_doc;
    }
    return $docs;
  }

  public function listBillingMonths($id = NULL) {
    $url = '/commerce/organizations/' . rawurlencode($this->client->getOrg()) . '/billing-documents-months';
    $this->client->get($url);
    $data = $this->client->getResponse();

    $months = array();
    foreach ($data as $item) {
      $months[] = new BillingMonth($item);
    }
    return $months;
  }

  protected function initValues() {
    $this->organization = NULL;
    $this->product = array();
    $this->sub_org = array();
    $this->developer = array();
    $this->billable_developer = NULL;
    $this->billable_exchange_org;
    $this->start_date = NULL;
    $this->end_date = NULL;
    $this->billing_month = NULL;
    $this->billing_year = NULL;
    $this->status = NULL;
    $this->type = NULL;
    $this->document_number = NULL;
    $this->currency = NULL;
    $this->amount = 0;
    $this->tax_amount = 0;
    $this->due_date = NULL;
    $this->batch_id = NULL;
    $this->payment_due_days = NULL;
    $this->billing_doc_date = NULL;
    $this->id = NULL;
    $this->file = NULL;
    $this->file_mime_type = NULL;
    // TODO
  }

  public function instantiateNew() {
    return new BillingDocument($this->client);
  }

  public function loadFromRawData($data, $reset = FALSE) {
    if ($reset) {
      $this->initValues();
    }

    $excluded_properties = array(
      'organization',
      'product',
      'subOrg',
      'developer',
      'billableDeveloper',
      'billableExchangeOrg',
    );

    foreach (array_keys($data) as $property) {
      if (in_array($property, $excluded_properties)) {
        continue;
      }

      // form the setter method name to invoke setXxxx
      $setter_method = 'set' . ucfirst($property);

      if (method_exists($this, $setter_method)) {
        $this->$setter_method($data[$property]);
      }
      else {
        Log::write(__CLASS__, Log::LOGLEVEL_NOTICE, 'No setter method was found for property "' . $property . '"');
      }
    }

    if (isset($data['organization'])) {
      $organization = new Organization($this->client);
      $organization->loadFromRawData($data['organization']);
      $this->organization = $organization;
    }

    if (isset($data['product'])) {
      foreach ($data['product'] as $product_item) {
        $product = new Product($this->client);
        $product->loadFromRawData($product_item);
        $this->product[] = $product;
      }
    }

    if (isset($data['subOrg'])) {
      foreach($data['subOrg'] as $sub_org_item) {
        $organization = new Organization($this->client);
        $organization->loadFromRawData($sub_org_item);
        $this->sub_org[] = $organization;
      }
    }

    if (isset($data['developer'])) {
      foreach ($data['developer'] as $dev_item) {
        $dev = new Developer($this->client);
        $dev->loadFromRawData($dev_item);
        $this->developer[] = $dev;
      }
    }

    if (isset($data['billableDeveloper'])) {
      $dev = new Developer($this->client);
      $dev->loadFromRawData($data['billableDeveloper']);
      $this->billable_developer = $dev;
    }

    if (isset($data['billableExchangeOrg'])) {
      $organization = new Organization($this->client);
      $organization->loadFromRawData($data['billableExchangeOrg']);
      $this->billable_exchange_org = $organization;
    }
  }

  public function __toString() {
    $obj = array();
    $properties = array_keys(get_object_vars($this));
    $excluded_properties = array_keys(get_class_vars(get_parent_class($this)));
    foreach ($properties as $property) {
      if (in_array($property, $excluded_properties)) {
        continue;
      }
      if (isset($this->$property)) {
        $obj[$property] = $this->$property;
      }
    }
    return json_encode($obj);
  }

  public function getId() {
    return $this->id;
  }

  // Used in data load invoked by $this->loadFromRawData()
  private function setId($id) {
    $this->id = $id;
  }

  public function getFile() {
    if (!isset($this->file)) {
      if (!isset($this->document_number)) {
        throw new ParameterException('Cannot load file for a Billing Document with no document number.');
      }
      $url = $this->base_url . '/' . rawurlencode($this->document_number) . '/file';
      $this->client->get($url, '*/*');
      $this->getResponse(); // Handle any errors

      $this->file = $this->client->getResponseString();
      $this->file_mime_type = $this->client->getResponseMimeType();
    }
    return $this->file;
  }

  protected function setFile($file) {
    $this->file = $file;
  }

  public function getFileMimeType() {
    if (!isset($this->file_mime_type)) {
      $this->getFile();
    }
    return $this->file_mime_type;
  }

  protected function setFileMimeType($file_mime_type) {
    $this->file_mime_type = $file_mime_type;
  }

  public function getOrganization() {
    return $this->organization;
  }
  public function setOrganization(Organization $org) {
    $this->organization = $org;
  }

  public function getProducts() {
    return $this->product;
  }
  public function addProduct(Product $product) {
    $this->product[] = $product;
  }
  public function clearProducts() {
    $this->product = array();
  }

  public function getSubOrgs() {
    return $this->sub_org;
  }
  public function addSubOrg(Organization $org) {
    $this->sub_org[] = $org;
  }
  public function clearSubOrgs() {
    $this->sub_org = array();
  }

  public function getDevelopers() {
    return $this->developer;
  }
  public function addDeveloper(Developer $developer) {
    $this->developer[] = $developer;
  }
  public function clearDevelopers() {
    $this->developer = array();
  }

  public function getBillableDeveloper() {
    return $this->billable_developer;
  }
  public function setBillableDeveloper(Developer $developer) {
    $this->billable_developer = $developer;
  }

  public function getBillableExchangeOrg() {
    return $this->billable_exchange_org;
  }
  public function setBillableExchangeOrg(Organization $org) {
    $this->billable_exchange_org = $org;
  }

  public function getStartDate() {
    return $this->start_date;
  }
  public function setStartDate($start_date) {
    $this->start_date = $start_date;
  }

  public function getEndDate() {
    return $this->end_date;
  }
  public function setEndDate($end_date) {
    $this->end_date = $end_date;
  }

  public function getBillingMonth() {
    return $this->billing_month;
  }
  public function setBillingMonth($month) {
    $this->billing_month = MonthType::get($month);
  }

  public function getBillingYear() {
    return $this->billing_year;
  }
  public function setBillingYear($year) {
    $this->billing_year = $year;
  }

  public function getStatus() {
    return $this->status;
  }
  public function setStatus($status) {
    $this->status = $status;
  }

  public function getType() {
    return $this->type;
  }
  public function setType($type) {
    $this->type = $type;
  }

  public function getDocumentNumber() {
    return $this->document_number;
  }
  public function setDocumentNumber($document_number) {
    $this->document_number = $document_number;
  }

  public function getCurrency() {
    return $this->currency;
  }
  public function setCurrency($currency) {
    $this->currency = $currency;
  }

  public function getAmount() {
    return $this->amount;
  }
  public function setAmount($amount) {
    $this->amount = $amount;
  }

  public function getTaxAmount() {
    return $this->tax_amount;
  }
  public function setTaxAmount($tax_amount) {
    $this->tax_amount = $tax_amount;
  }

  public function getDueDate() {
    return $this->due_date;
  }
  public function setDueDate($due_date) {
    $this->due_date = $due_date;
  }

  public function getBatchId() {
    return $this->batch_id;
  }
  public function setBatchId($batch_id) {
    $this->batch_id = $batch_id;
  }

  public function getPaymentDueDays() {
    return $this->payment_due_days;
  }
  public function setPaymentDueDays($due_days) {
    $this->payment_due_days = $due_days;
  }

  public function getBillingDocDate() {
    return $this->billing_doc_date;
  }
  public function setBillingDocDate($date) {
    $this->billing_doc_date = $date;
  }

}