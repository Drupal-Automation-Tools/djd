<?php
namespace Apigee\Commerce;

use Apigee\Exceptions\ResponseException;
use Apigee\Commerce\DataStructures\BillingMonth;
use Apigee\Commerce\Types\StatusType as StatusType;
use Apigee\Commerce\Types\TaxModelType as TaxModelType;
use Apigee\Commerce\Types\OrgType as OrgType;
use Apigee\Commerce\Types\Country as Country;
use Apigee\Commerce\Types\BillingCycleType as BillingCycleType;
use Apigee\Commerce\Types\BillingType as BillingType;
use Apigee\Commerce\Exceptions\CommerceApiException;

use \Apigee\Commerce\DataStructures\SupportedCurrency as SupportedCurrency;
use \Apigee\Exceptions\ParameterException as ParameterException;
use \Apigee\Exceptions\NotImplementedException as NotImplementedException;
use \Apigee\Util\Log as Log;

class Organization extends Base\BaseObject {

  /**
   * @var array
   */
  private $addresses;

  /**
   * @var bool
   */
  private $approve_trusted;

  /**
   * @var bool
   */
  private $approve_untrusted;

  /**
   * @var string
   */
  private $billing_cycle;

  /**
   * @var \Apigee\Commerce\Organization
   */
  private $children;

  /**
   * @var string
   */
  private $country;

  /**
   * @var string
   */
  private $currency;

  /**
   * @var string
   */
  private $description;

  /**
   * @var bool
   */
  private $group_organization;

  /**
   * @var bool
   */
  private $has_billing_adjustment;

  /**
   * @var bool
   */
  private $has_broker;

  /**
   * @var bool
   */
  private $has_self_billing;

  /**
   * @var bool
   */
  private $has_separate_invoice_for_product;

  /**
   * @var string
   */
  private $id;

  /**
   * @var bool
   */
  private $issue_netting_statement;

  /**
   * @var string
   */
  private $logo_url;

  /**
   * @var string
   */
  private $name;

  /**
   * @var bool
   */
  private $netting_statement_per_currency;

  /**
   * @var string
   */
  private $reg_no;

  /**
   * @var \Apigee\Commerce\Organization
   */
  private $parent;

  /**
   * @var string
   */
  private $org_type;

  /**
   * @var bool
   */
  private $self_billing_as_exch_org;

  /**
   * @var bool
   */
  private $self_billing_for_all_dev;

  /**
   * @var bool
   */
  private $separate_invoice_for_fees;

  /**
   * @var string
   */
  private $status;

  /**
   * @var string
   */
  private $supported_billing_type;

  /**
   * @var string
   */
  private $tax_model;

  /**
   * @var string
   */
  private $tax_nexus;

  /**
   * @var string
   */
  private $tax_reg_no;

  /**
   * @var string
   */
  private $timezone;

  public function __construct(\Apigee\Util\APIClient $client) {
    $this->init($client);
    $this->client = $client;
    $this->base_url = '/commerce/organizations';
    $this->wrapper_tag = 'organization'; // TODO verify
    $this->id_field = 'name';
    $this->id_is_autogenerated = FALSE;

    $this->initValues();
  }

  public function getList($page_num = NULL, $page_size = 20) {
    throw new NotImplementedException('Organization does not support the getList method.');
  }

  public function listOrganizationIdentifiers() {
    $url = 'organizations';
    $this->client->get($url);
    $list = $this->getResponse();
    return $list;
  }

  /**
   * Override parent's load function to optionally pull org name
   * from the APIClient.
   *
   * @param null|string $id
   */
  public function load($id = NULL) {
    if (!isset($id)) {
      $id = $this->name;
    }
    if (!isset($id)) {
      $id = $this->client->getOrg();
    }
    parent::load($id);
  }

  public function loadFromRawData($data, $reset = FALSE) {
    if ($reset) {
      $this->initValues();
    }
    foreach ($data['address'] as $address_data) {
      $address = new DataStructures\Address($address_data);
      $this->addresses[] = $address;
    }

    $this->tax_reg_no = $data['taxRegNo'];
    $this->reg_no = $data['regNo'];

    $excluded_properties = array('address', 'regNo', 'taxRegNo', 'parent', 'children');
    foreach (array_keys($data) as $property) {
      if (in_array($property, $excluded_properties)) {
        continue;
      }

      // form the setter method name to invoke setXxxx
      $setter_method = 'set' . ucfirst($property);

      if (method_exists($this, $setter_method)) {
        $this->$setter_method($data[$property]);
      }
      else {
        Log::write(__CLASS__, Log::LOGLEVEL_NOTICE, 'No setter method was found for property "' . $property . '"');
      }
    }
  }

  public function __toString() {
    $obj = array();
    $obj['address'] = $this->addresses;
    $properties = array_keys(get_object_vars($this));
    $excluded_properties = array_keys(get_class_vars(get_parent_class($this)));
    foreach ($properties as $property) {
      if ($property == 'addresses' || in_array($property, $excluded_properties)) {
        continue;
      }
      if (isset($this->$property)) {
        $obj[$property] = $this->$property;
      }
    }
    return json_encode($obj);
  }

  protected function initValues() {
    $this->clearAddresses();
    $this->approve_trusted = FALSE;
    $this->approve_untrusted = FALSE;
    $this->billing_cycle = 'CALENDAR_MONTH';
    $this->country = 'US';
    $this->currency = 'USD';
    $this->description = '';
    $this->group_organization = FALSE;
    $this->has_billing_adjustment = FALSE;
    $this->has_broker = FALSE;
    $this->has_self_billing = FALSE;
    $this->has_separate_invoice_for_product = FALSE;
    $this->id = '';
    $this->issue_netting_statement = FALSE;
    $this->logo_url = '';
    $this->name = NULL;
    $this->netting_statement_per_currency = FALSE;
    $this->reg_no = '';
    $this->self_billing_as_exch_org = FALSE;
    $this->self_billing_for_all_dev = FALSE;
    $this->separate_invoice_for_fees = FALSE;
    $this->status = 'ACTIVE';
    $this->tax_model = 'DISCLOSED';
    $this->tax_reg_no = '';
    $this->timezone = 'UTC';
  }

  public function instantiateNew() {
    return new Organization($this->client);
  }

  /*
   * accessors (getters/setters)
   */
  public function getAddresses() {
    return $this->addresses;
  }
  public function addAddress(DataStructures\Address $address) {
    $this->addresses[] = $address;
  }
  public function clearAddresses() {
    $this->addresses = array();
  }

  // Booleans
  public function getApproveTrusted() {
    return $this->approve_trusted;
  }
  public function setApproveTrusted($bool = TRUE) {
    $this->approve_trusted = (bool)$bool;
  }
  public function getApproveUntrusted() {
    return $this->approve_untrusted;
  }
  public function setApproveUntrusted($bool = TRUE) {
    $this->approve_untrusted = (bool)$bool;
  }
  public function getGroupOrganization() {
    return $this->group_organization;
  }
  public function setGroupOrganization($bool = TRUE) {
    $this->group_organization = (bool)$bool;
  }
  public function hasBillingAdjustment() {
    return $this->has_billing_adjustment;
  }
  public function setHasBillingAdjustment($bool = TRUE) {
    $this->has_billing_adjustment = (bool)$bool;
  }
  public function hasBroker() {
    return $this->has_broker;
  }
  public function setHasBroker($bool = TRUE) {
    $this->has_broker = (bool)$bool;
  }
  public function hasSelfBilling() {
    return $this->has_self_billing;
  }
  public function setHasSelfBilling($bool = TRUE) {
    $this->has_self_billing = (bool)$bool;
  }
  public function hasSeparateInvoiceForProduct() {
    return $this->has_self_billing;
  }
  public function setHasSeparateInvoiceForProduct($bool = TRUE) {
    $this->has_separate_invoice_for_product = (bool)$bool;
  }
  public function getIssueNettingStmt() {
    return $this->issue_netting_statement;
  }
  public function setIssueNettingStmt($bool = TRUE) {
    $this->issue_netting_statement = (bool)$bool;
  }
  public function getNettingStmtPerCurrency() {
    return $this->netting_statement_per_currency;
  }
  public function setNettingStmtPerCurrency($bool = TRUE) {
    $this->netting_statement_per_currency = (bool)$bool;
  }
  public function getSelfBillingAsExchOrg() {
    return $this->self_billing_as_exch_org;
  }
  public function setSelfBillingAsExchOrg($bool = TRUE) {
    $this->self_billing_as_exch_org = (bool)$bool;
  }
  public function getSelfBillingForAllDev() {
    return $this->self_billing_for_all_dev;
  }
  public function setSelfBillingForAllDev($bool = TRUE) {
    $this->self_billing_for_all_dev = (bool)$bool;
  }
  public function getSeparateInvoiceForFees() {
    return $this->separate_invoice_for_fees;
  }
  public function setSeparateInvoiceForFees($bool = TRUE) {
    $this->separate_invoice_for_fees = (bool)$bool;
  }

  public function getBillingCycle() {
    return $this->billing_cycle;
  }
  public function setBillingCycle($cycle) {
    $this->billing_cycle = BillingCycleType::get($cycle);
  }

  public function getChildren() {
    return $this->children;
  }
  public function setChildren($children) {
    $this->children = $children;
  }

  public function getCountry() {
    return $this->country;
  }
  public function setCountry($country) {
    Country::validateCountryCode($country);
    $this->country = $country;
  }

  public function getCurrency() {
    return $this->currency;
  }
  public function setCurrency($currency) {
    // TODO: validate $currency here
    $this->currency = strtoupper($currency);
  }

  public function getDescription() {
    return $this->description;
  }
  public function setDescription($desc) {
    $this->description = (string)$desc;
  }

  public function getId() {
    return $this->id;
  }
  public function setId($id) {
    $this->id = (string)$id;
  }

  public function getLogoUrl() {
    return $this->logo_url;
  }
  public function setLogoUrl($url) {
    if (empty($url)) {
      $this->logo_url = NULL;
    }
    else {
      if (!$this->validateUri($url)) {
        throw new ParameterException("$url is not a valid logo URL.");
      }
      $this->logo_url = $url;
    }
  }

  public function getName() {
    return $this->name;
  }
  public function setName($name) {
    $this->name = (string)$name;
  }

  public function getOrgType() {
    return $this->org_type;
  }
  public function setOrgType($org_type) {
    $this->org_type = OrgType::get($org_type);
  }

  /**
   * @return \Apigee\Commerce\Organization
   */
  public function getParent() {
    return $this->parent;
  }
  /**
   * @param \Apigee\Commerce\Organization $parent
   */
  public function setParent($parent) {
    $this->parent = $parent;
  }

  public function getRegNo() {
    return $this->reg_no;
  }
  public function setRegNo($num) {
    $this->reg_no = (string)$num;
  }

  public function getStatus() {
    return $this->status;
  }
  public function setStatus($status) {
    $this->status = StatusType::get($status);
  }

  public function getSupportedBillingType() {
    return $this->supported_billing_type;
  }
  public function setSupportedBillingType($supported_billing_type) {
    $this->supported_billing_type = BillingType::get($supported_billing_type);
  }

  public function getTaxModel() {
    return $this->tax_model;
  }
  public function setTaxModel($model) {
    $this->tax_model = TaxModelType::get($model);
  }

  public function getTaxNexus() {
    return $this->tax_nexus;
  }
  public function setTaxNexus($tax_nexus) {
    $this->tax_nexus = $tax_nexus;
  }

  public function getTaxRegNo() {
    return $this->tax_reg_no;
  }
  public function setTaxRegNo($num) {
    $this->tax_reg_no = (string)$num;
  }

  public function getTimezone() {
    return $this->timezone;
  }
  public function setTimezone($tz) {
    // TODO: validate $tz. Is this just a string from tzdata?
    $this->timezone = $tz;
  }

  public function listSupportedCurrencies($id = NULL) {
    if (!isset($id)) {
      $id = $this->client->getOrg();
    }
    $url = $this->base_url . '/' . rawurlencode($id) . '/supported-currencies';
    $this->client->get($url);
    $list = $this->getResponse();
    $currencies = array();
    foreach ($list['supportedCurrency'] as $currency_item) {
      $currencies[] = new SupportedCurrency($currency_item);
    }
    return $currencies;
  }

  public function getPrepaidBalanceReport($month, $year, $developer_id, $currency_id) {

    try {
      $dev_criteria = new \stdClass();
      $dev_criteria->id = $developer_id;
      $dev_criteria->orgId = $this->client->getOrg();

      $curr_criteria = new \stdClass();
      $curr_criteria->id = strtolower($currency_id);
      $curr_criteria->orgId = $this->client->getOrg();

      $data = new \stdClass();
      $data->showTxDetail = TRUE;
      $data->devCriteria = array($dev_criteria);
      $data->currCriteria = array($curr_criteria);
      $data->billingMonth = strtoupper($month);
      $data->billingYear = $year;

      $url = '/commerce/organizations/' . rawurlencode($this->client->getOrg()) . '/prepaid-balance-reports';
      $content_type = 'application/json; charset=utf-8';
      $accept_type = 'application/octet-stream; charset=utf-8';

      $this->client->post($url, json_encode($data), $content_type, $accept_type);
      $response = $this->client->getResponseString();
    }
    catch(ResponseException $re) {
      if (CommerceApiException::isCommerceExceptionCode($re)) {
        throw new CommerceApiException($re);
      }
      throw $re;
    }
    return $response;
  }
}