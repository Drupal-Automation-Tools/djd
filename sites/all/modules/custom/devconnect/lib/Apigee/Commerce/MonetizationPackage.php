<?php

namespace Apigee\Commerce;

use \Apigee\Exceptions\ParameterException as ParameterException;
use \Apigee\Util\Log as Log;

class MonetizationPackage extends Base\BaseObject {

  /**
   * MonetizationPackage Id
   * @var string
   */
  private $id;

  /**
   * Organization
   * @var \Apigee\Commerce\Organization
   */
  private $organization;

  /**
   * Monetization Package Name
   * @var string
   */
  private $name;

  /**
   * Display Name
   * @var string
   */
  private $display_name;

  /**
   * Description
   * @var string
   */
  private $description;

  /**
   * status
   * @var string
   */
  private $status;

  /**
   * Products in this package
   * @var array items in this array are instances of \Apigee\Commerce\Product
   */
  private $products = array();

  /**
   * Virtual currency to be purchased as part of monetization package
   * @var \Apigee\Commerce\DataStructures\SupportedCurrency
   */
  private $virtual_currency;

  /**
   * Class constructor
   * @param \Apigee\Util\APIClient $client
   */
  public function __construct(\Apigee\Util\APIClient $client) {
    $this->init($client);

    $this->base_url = '/commerce/organizations/' . rawurlencode($this->client->getOrg()) . '/monetization-packages';
    $this->wrapper_tag = 'monetizationPackage';
    $this->id_field = 'id';
    $this->id_is_autogenerated = FALSE;

    $this->initValues();
  }

  /**
   * Implements BaseObject::instantiate_new()
   */
  public function instantiateNew() {
    return new MonetizationPackage($this->client);
  }

  /**
   * Implements BaseObject::load_from_raw_data($data, $reset = FALSE)
   *
   * @param array $data
   * @param bool $reset
   */
  public function loadFromRawData($data, $reset = FALSE) {
    if ($reset) {
      $this->initValues();
    }

    if (isset($data['virtualCurrency'])) {
      $this->virtual_currency = new DataStructures\SupportedCurrency($data['virtualCurrency']);
    }

    if (isset($data['organization'])) {
      $organization = new Organization($this->client);
      $organization->loadFromRawData($data['organization']);
      $this->organization = $organization;
    }

    if (isset($data['product'])) {
      foreach ($data['product'] as $product_item) {
        $product = new Product($this->client);
        $product->loadFromRawData($product_item);
        $this->products[] = $product;
      }
    }

    $excluded_properties = array('organization', 'product', 'virtualCurrency');
    foreach (array_keys($data) as $property) {
      if (in_array($property, $excluded_properties)) {
        continue;
      }

      // form the setter method name to invoke setXxxx
      $setter_method = 'set' . ucfirst($property);

      if (method_exists($this, $setter_method)) {
        $this->$setter_method($data[$property]);
      }
      else {
        Log::write(__CLASS__, Log::LOGLEVEL_NOTICE, 'No setter method was found for property "' . $property . '"');
      }
    }
  }

  /**
   * Implements BaseObject::init_values()
   */
  protected function initValues() {
    $this->description = NULL;
    $this->display_name = NULL;
    $this->id = NULL;
    $this->name = NULL;
    $this->products = array();
    $this->status = NULL;
    //$this->payment_due_days = NULL;
    //$this->price_points = array();
    //$this->supports_refund = NULL;
    //$this->transaction_success_criteria = NULL;
    //$this->developer = NULL;
  }

  /**
   * Implements BaseObject::__toString()
   * @return string
   */
  public function __toString() {
    $obj = array();
    $properties = array_keys(get_object_vars($this));
    $excluded_properties = array_merge(array_keys(get_class_vars(get_parent_class($this))));
    foreach ($properties as $property) {
      if (in_array($property, $excluded_properties)) {
        continue;
      }
      if (isset($this->$property)) {
        if (is_object($this->$property)) {
          $obj[$property] = json_decode((string) $this->$property, TRUE);
        }
        else {
          $obj[$property] = $this->$property;
        }
      }
    }
    return json_encode($obj);
  }

  /*
   * Declared methods
   */

  /**
   * Fetches packages with published rate plans which are available to a
   * developer.
   *
   * @param string $developer_id
   *
   * @return array
   */
  public function getPackagesWithPublishedRatePlans($developer_id) {
    $url = '/commerce/organizations/' . rawurlencode($this->client->getOrg()) . '/developers/' . rawurlencode($developer_id) . '/monetization-packages?current=true&allAvailable=true';
    $this->client->get($url);
    $response = $this->getResponse();

    $return_objects = array();

    foreach ($response['monetizationPackage'] as $response_data) {
      $obj = $this->instantiateNew($this->client);
      $obj->loadFromRawData($response_data);
      $return_objects[] = $obj;
    }
    return $return_objects;
  }

  // getters

  /**
   * Get MonetizationPackage Id
   * @return string
   */
  public function getId() {
    return $this->id;
  }

  /**
   * Get Organization
   * @return \Apigee\Commerce\Organization
   */
  public function getOrganization() {
    return $this->organization;
  }

  /**
   * Get Monetization Package Name
   * @return string
   */
  public function getName() {
    return $this->name;
  }

  /**
   * Get Display Name
   * @return string
   */
  public function getDisplayName() {
    return $this->display_name;
  }

  /**
   * Get Description
   * @return string
   */
  public function getDescription() {
    return $this->description;
  }

  /**
   * Get Status
   * @return string
   */
  public function getStatus() {
    return $this->status;
  }

  /**
   * Get Products in this package
   * @return array items in this array are instances of \Apigee\Commerce\Product
   */
  public function getProducts() {
    return $this->products;
  }

  /**
   * Get Virtual currency to be purchased as part of monetization package
   * @return \Apigee\Commerce\DataStructures\SupportedCurrency
   */
  public function getVirtualCurrency() {
    return $this->virtual_currency;
  }

  // setters

  /**
   * Set MonetizationPackage Id
   * @var string $id
   */
  public function setId($id) {
    $this->id = $id;
  }

  /**
   * Set Organization
   * @var \Apigee\Commerce\Organization $organization
   */
  public function setOrganization($organization) {
    $this->organization = $organization;
  }

  /**
   * Set Monetization Package Name
   * @var string $name
   */
  public function setName($name) {
    $this->name = $name;
  }

  /**
   * Display Name
   * @var string $display_name
   */
  public function setDisplayName($display_name) {
    $this->display_name = $display_name;
  }

  /**
   * Set Description
   * @var string $description
   */
  public function setDescription($description) {
    $this->description = $description;
  }

  /**
   * Set Status
   * @var string $status
   * @throws \Apigee\Exceptions\ParameterException
   */
  public function setStatus($status) {
    $status = strtoupper($status);
    if (!in_array($status, array('CREATED', 'INACTIVE', 'ACTIVE'))) {
      throw new ParameterException('Invalid monetization package status value: ' . $status);
    }
    $this->status = $status;
  }

  /**
   * Add Product to this package
   * @var \Apigee\Commerce\Product
   */
  public function addProduct($product) {
    $this->products[] = $product;
  }

  /**
   * Remove all product from this package
   */
  public function clear_products() {
    $this->products = array();
  }

  /**
   * Set Virtual currency to be purchased as part of monetization package
   * @var \Apigee\Commerce\DataStructures\SupportedCurrency
   */
  public function setVirtualCurrency($curr) {
    $this->virtual_currency = $curr;
  }

}
