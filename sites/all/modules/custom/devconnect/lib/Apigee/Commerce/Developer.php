<?php

namespace Apigee\Commerce;

use Apigee\Commerce\DataStructures\RevenueReport;
use Apigee\Commerce\DataStructures\TransactionBrokerage;
use Apigee\Commerce\Types\BillingType;
use Apigee\Commerce\Types\DeveloperType;
use Apigee\Commerce\Types\DeveloperStatusType;
use \Apigee\Commerce\DataStructures\DeveloperBalance as DeveloperBalance;
use \Apigee\Exceptions\ParameterException as ParameterException;
use \Apigee\Util\Log as Log;

class Developer extends Base\BaseObject {

  /**
   * @var double
   */
  private $approx_tax_rate;

  /**
   * @var array
   */
  private $addresses;

  /**
   * @var string
   */
  private $billing_type;

  /**
   * @var string
   */
  private $billing_profile;

  /**
   * @var bool
   */
  private $broker;

  /**
   * @var \Apigee\Commerce\DeveloperCategory
   */
  private $developer_category;

  /**
   * @var string
   * Unique identifier
   */
  public $email;

  /**
   * @var boolean
   */
  private $has_self_billing;

  /**
   * @var string
   */
  private $id;

  /**
   * @var string
   */
  private $legal_name;

  /**
   * @var string
   */
  private $name;

  /**
   * @var string
   */
  private $registration_id;

  /**
   * @var \Apigee\Commerce\Organization
   */
  private $organization;

  /**
   * @var \Apigee\Commerce\Developer
   */
  private $parent_id;

  /**
   * @var string
   */
  private $phone;

  /**
   * @var \Apigee\Commerce\DeveloperRatePlan
   */
  private $rate_plan;

  /**
   * @var string
   */
  private $status;

  /**
   * @var string
   */
  private $tax_exempt_auth_no;

  /**
   * @var \Apigee\Commerce\DataStructures\TransactionBrokerage
   */
  private $transaction_brokerages;

  /**
   * @var string
   */
  private $type;


  public function __construct(\Apigee\Util\APIClient $client) {
    $this->init($client);

    $this->base_url = '/commerce/organizations/' . rawurlencode($this->client->getOrg()) . '/developers';
    $this->wrapper_tag = 'developer';
    $this->id_field = 'email';
    $this->id_is_autogenerated = FALSE;

    $this->initValues();
  }

  /**
   * Implements Base\BaseObject::instantiatNew().
   *
   * @return Developer
   */
  public function instantiateNew() {
    return new Developer($this->client);
  }

  public function loadFromRawData($data, $reset = FALSE) {
    if ($reset) {
      $this->initValues();
    }
    $excluded_properties = array('address', 'organization', 'transactionBrokerages', 'ratePlan', 'parentId', 'developerCategory');
    foreach (array_keys($data) as $property) {
      if (in_array($property, $excluded_properties)) {
        continue;
      }

      // form the setter method name to invoke setXxxx
      $setter_method = 'set' . ucfirst($property);

      if (method_exists($this, $setter_method)) {
        $this->$setter_method($data[$property]);
      }
      else {
        Log::write(__CLASS__, Log::LOGLEVEL_NOTICE, 'No setter method was found for property "' . $property . '"');
      }
    }
    $this->id = $data['id'];
    if (isset($data['address']) && is_array($data['address']) && count($data['address']) > 0) {
      foreach ($data['address'] as $addr_item) {
        $this->addresses[] = new DataStructures\Address($addr_item);
      }
    }

    if (isset($data['organization'])) {
      $organization = new Organization($this->client);
      $organization->loadFromRawData($data['organization']);
      $this->organization = $organization;
    }
    if (isset($data['transactionBrokerages'])) {
      foreach ($data['transactionBrokerages'] as $trans_brok) {
        $this->transaction_brokerages[] = new TransactionBrokerage($trans_brok);
      }
    }
    if (isset($data['ratePlan'])) {
      foreach($data['ratePlan'] as $dev_rate_plan) {
        $dev_rate_plan = new DeveloperRatePlan($this->email, $this->client);
        $dev_rate_plan->loadFromRawData($dev_rate_plan);
        $this->rate_plan[] = $dev_rate_plan;
      }
    }
    if (isset($data['parentId'])) {
      $parent = new Developer($this->client);
      $parent->loadFromRawData($data['parentId']);
      $this->parent_id = $parent;
    }
    if (isset($data['developerCategory'])) {
      $dev_cat = new DeveloperCategory($this->client);
      $dev_cat->loadFromRawData($data['developerCategory']);
      $this->developer_category = $dev_cat;
    }
  }

  protected function initValues() {
    $this->addresses = array();
    $this->billing_type = 'PREPAID';
    $this->broker = FALSE;
    $this->email = NULL;
    $this->legal_name = NULL;
    $this->name = NULL;
    $this->registration_id = NULL;
    $this->status = 'ACTIVE';
    $this->type = 'UNTRUSTED';
  }

  public function __toString() {
    $obj = array();
    $obj['address'] = $this->addresses;
    $obj['organization'] = array('id' => $this->organization->getId());

    $properties = array_keys(get_object_vars($this));
    $excluded_properties = array_keys(get_class_vars(get_parent_class($this)));
    foreach ($properties as $property) {
      if ($property == 'address' || $property == 'organization' || in_array($property, $excluded_properties)) {
        continue;
      }
      if (isset($this->$property)) {
        $obj[$property] = $this->$property;
      }
    }
    return json_encode($obj);
  }


  public function getApplications() {
    return new Application($this->email, $this->client);
  }

  public function getBankDetails() {
    return new BankDetail($this->email, $this->client);
  }

  public function getAcceptedRatePlans() {
    $url = $this->base_url . '/' . rawurlencode($this->email) . '/developer-accepted-rateplans';
    $this->client->get($url);
    $response = $this->getResponse();

    $return_objects = array();
    foreach ($response['developerRatePlan'] as $response_data) {
      $developerRatePlan = new DeveloperRatePlan($this->getEmail(), $this->client);
      $developerRatePlan->loadFromRawData($response_data);
      $return_objects[] = $developerRatePlan;

    }
    return $return_objects;
  }

  public function getPrepaidBalance($month = NULL, $billing_year = NULL, $currency_id = NULL) {
    $month = isset($month) ? $month : date('F', time());
    $billing_year = isset($billing_year) ? $billing_year : date('Y', time());
    $url = $this->base_url . '/' . rawurlencode($this->email)
           . '/prepaid-developer-balance?billingMonth=' .rawurlencode(strtoupper($month) ). '&billingYear=' . rawurlencode($billing_year) . '&supportedCurrencyId=' . rawurlencode($currency_id);
    $this->client->get($url);
    $response = $this->getResponse();
    $return_objects = array();
    foreach ($response['developerBalance'] as $response_data) {
      $obj = new DeveloperBalance($response_data);
      $return_objects[] = $obj;
    }
    return $return_objects;
  }

  public function topUpPrepaidBalance($currency, $amount, $transaction_id, $gateway_tx_reference) {
    $new_balance = array(
      'amount' => $amount,
      'txReference' => $transaction_id,
      'gatewayTxReference' => $gateway_tx_reference,
      'supportedCurrency' => array(
        'id' => $currency,
      )
    );

    $url = $this->base_url . '/' . rawurlencode($this->email) . '/developer-balances';
    $this->client->post($url, $new_balance, 'application/json');
  }

  public function getRevenueReport($report) {
    $url = '/commerce/organizations/' . rawurlencode($this->client->getOrg()) . '/developers/' . rawurlencode($this->email) . '/revenue-reports';
    $content_type = 'application/json; charset=utf-8';
    $accept_type = 'application/octet-stream; charset=utf-8';

    $this->client->post($url, json_encode($report), $content_type, $accept_type);
    $response = $this->client->getResponseString();
    return $response;
  }

  public function saveReportDefinition($report_def) {
    $url = '/commerce/organizations/' . rawurlencode($this->client->getOrg()) . '/developers/' . rawurlencode($this->email) . '/report-definitions';
    $this->client->post($url, json_encode($report_def));
    $response = $this->client->getResponseString();
  }

  public function getReportDefinitions() {
    $url = '/commerce/organizations/' . rawurlencode($this->client->getOrg()) . '/developers/' . rawurlencode($this->email) . '/report-definitions';
    $accept_type = 'application/json; charset=utf-8';
    $this->client->get($url, $accept_type);
    $data = $this->client->getResponse();
    $revenue_reports = array();
    foreach ($data['reportDefinition'] as $report) {
      $revenue_report = new RevenueReport($report, $this);
      $revenue_reports[] = $revenue_report;
    }
    return $revenue_reports;
  }

  /*
   * accessors (getters/setters)
   */

  public function getApproxTaxRate() {
    return $this->approx_tax_rate;
  }
  public function setApproxTaxRate($approx_tax_rate) {
    $this->approx_tax_rate = $approx_tax_rate;
  }

  public function getAddresses() {
    return $this->addresses;
  }
  public function addAddress(DataStructures\Address $address) {
    $this->addresses[] = $address;
  }
  public function clearAddresses() {
    $this->addresses = array();
  }
  public function getBillingProfile() {
    return $this->billing_profile;
  }
  public function setBillingProfile($billing_profile) {
    $this->billing_profile = $billing_profile;
  }
  public function getBillingType() {
    return $this->billing_type;
  }
  public function setBillingType($type) {
    $this->billing_type = BillingType::get($type);
  }
  /**
   * @return \Apigee\Commerce\DeveloperCategory
   */
  public function getDeveloperCategory() {
    return $this->developer_category;
  }
  /**
   * @param \Apigee\Commerce\DeveloperCategory $dev_category
   */
  public function setDeveloperCategory(DeveloperCategory $dev_category) {
    $this->developer_category = $dev_category;
  }
  public function isBroker() {
    return $this->broker;
  }
  public function setBroker($bool = TRUE) {
    $this->broker = (bool)$bool;
  }
  public function getEmail() {
    return $this->email;
  }
  public function setEmail($email) {
    // TODO: validate
    $this->email = $email;
  }
  public function hasSelfBilling() {
    return $this->has_self_billing;
  }
  public function setHasSelfBilling($has_self_billing) {
    $this->has_self_billing = $has_self_billing;
  }
  public function getId() {
    return $this->id;
  }
  public function setId($id) {
    $this->id = $id;
  }
  public function getLegalName() {
    return $this->legal_name;
  }
  public function setLegalName($name) {
    $this->legal_name = $name;
  }
  public function getName() {
    return $this->name;
  }
  public function setName($name) {
    $this->name = $name;
  }
  /**
   * @return \Apigee\Commerce\Organization
   */
  public function getOrganization() {
    return $this->organization;
  }
  /**
   * @param \Apigee\Commerce\Organization $organization
   */
  public function setOrganization(Organization $organization) {
    $this->organization = $organization;
  }
  /**
   * @return \Apigee\Commerce\Developer
   */
  public function getParentId() {
    return $this->parent_id;
  }
  /**
   * @param \Apigee\Commerce\Developer $developer
   */
  public function setParentId(Developer $developer) {
    $this->parent_id = $developer;
  }
  public function getPhone() {
    return $this->phone;
  }
  public function setPhone($phone) {
    $this->phone = $phone;
  }
  function getRatePlan() {
    return $this->rate_plan;
  }
  function addRatePlan($rate_plan) {
    $this->rate_plan[] = $rate_plan;
  }
  public function getRegistrationId() {
    return $this->registration_id;
  }
  public function setRegistrationId($id) {
    // TODO: validate
    $this->id = $id;
  }
  public function getStatus() {
    return $this->status;
  }
  public function setStatus($status) {
    $this->status = DeveloperStatusType::get($status);
  }
  public function getTaxExemptAuthNo() {
    return $this->tax_exempt_auth_no;
  }
  public function setTaxExemptAuthNo($tax_exempt_auth_no) {
    $this->tax_exempt_auth_no = $tax_exempt_auth_no;
  }
  public function getTransactionBrokerages() {
    return $this->transaction_brokerages;
  }
  public function addTransactionBrokerages($transaction_brokerages) {
    $this->transaction_brokerages[] = $transaction_brokerages;
  }
  public function clearTransactionBrokerages() {
    $this->transaction_brokerages = array();
  }
  public function getType() {
    return $this->type;
  }
  public function setType($type) {
    $this->type = DeveloperType::get($type);
  }
}