<?php
namespace Apigee\Commerce;

use Apigee\Commerce\Types\DeveloperTncsActionType;
use Apigee\Commerce\DataStructures\DeveloperTnc as DeveloperTnc;
use \Apigee\Exceptions\ParameterException as ParameterException;
use \Apigee\Util\Log as Log;

class TermAndCondition extends Base\BaseObject {

  private $id;

  private $organization;

  private $start_date;

  private $tnc_text;

  private $url;

  private $version;

  public function __construct(\Apigee\Util\APIClient $client) {
    $this->init($client);

    $this->base_url = '/commerce/organizations/' . rawurlencode($client->getOrg()) . '/tncs';
    $this->wrapper_tag = 'tnc';
    $this->id_field = 'id';
    $this->id_is_autogenerated = TRUE;

    $this->initValues();
  }

  public function getList($current = TRUE) {
    $current = isset($current) ? '?current=true' : '';
    $url = '/commerce/organizations/' . rawurlencode($this->client->getOrg()) . '/tncs' . $current;
    $this->client->get($url);
    $data = $this->client->getResponse();
    $objects = array();

    foreach ($data['tnc'] as $tnc_data) {
      $tnc = new TermAndCondition($this->getClient());
      $tnc->loadFromRawData($tnc_data);
      $objects[] = $tnc;
    }
    return $objects;
  }

  protected function initValues() {
    $this->id = NULL;
    $this->startDate = NULL;
    $this->version = NULL;
  }

  public function instantiateNew() {
    return new TermAndCondition($this->client);
  }

  public function loadFromRawData($data, $reset = FALSE) {
    if ($reset) {
      $this->initValues();
    }

    $excluded_properties = array('organization');

    foreach (array_keys($data) as $property) {
      if (in_array($property, $excluded_properties)) {
        continue;
      }

      // form the setter method name to invoke setXxxx
      $setter_method = 'set' . ucfirst($property);
      if (method_exists($this, $setter_method)) {
        $this->$setter_method($data[$property]);
      }
      else {
        Log::write(__CLASS__, Log::LOGLEVEL_NOTICE, 'No setter method was found for property "' . $property . '"');
      }
    }

    // Set objects

    if (isset($data['organization'])) {
      $organization = new Organization($this->client);
      $organization->loadFromRawData($data['organization']);
      $this->organization = $organization;
    }
  }

  public function __toString() {
    $obj = array();
    $properties = array_keys(get_object_vars($this));
    $excluded_properties = array_keys(get_class_vars(get_parent_class($this)));
    foreach ($properties as $property) {
      if (in_array($property, $excluded_properties)) {
        continue;
      }
      if (isset($this->$property)) {
        $obj[$property] = $this->$property;
      }
    }
    return json_encode($obj);
  }

  public function getAcceptedDevTermsAndConditions($developer_id, $current=NULL) {

    $url = '/commerce/organizations/' . rawurlencode($this->client->getOrg()) . '/developers/' . rawurlencode($developer_id). '/developer-tncs';
    if ($current) {
      $url .= '?current=true';
    }
    $this->client->get($url);
    $data = $this->client->getResponse();

    $dev_tncs = array();
    foreach($data['developerTnc'] as $tnc) {
      $dev_tnc = new DeveloperTnc($tnc);
      if (isset($tnc['tnc'])) {
        $tncs = new TermAndCondition($this->client);
        $tncs->loadFromRawData($tnc['tnc']);
        $dev_tnc->setTnc($tncs);
        $dev_tncs[] = $dev_tnc;
      }
    }
    return $dev_tncs;
  }

  public function isAbleToPurchase($developer_id) {
    $tncs = $this->getList(FALSE);
    $tncids_and_dates = array();
    $current_date = NULL;
    foreach ($tncs as $tnc) {
      $timezone = timezone_open($tnc->getOrganization()->getTimezone());
      if ($current_date == NULL) {
        $current_date = date_create('now', $timezone);
      }

      $start_date = date_create_from_format('Y-m-d', $tnc->getStartDate(), $timezone);

      // Skip TnC if start date is in the future
      if ($start_date > $current_date) {
        //continue;
      }

      // Add to developer should accept TnCs
      $tncids_and_dates[$start_date->getTimestamp()] = $tnc->getId();
    }

    // Sort tncs ASC by start date
    ksort($tncids_and_dates);

    // Get developer accepted tncs
    $dev_tncs = $this->getAcceptedDevTermsAndConditions($developer_id, TRUE);

    // Loop accepted tncs and see if the latest is there and action==ACCEPTED
    foreach ($dev_tncs as $dev_tnc) {
      if ($dev_tnc->getAction() == DeveloperTncsActionType::ACCEPTED
      && in_array($dev_tnc->getTnc()->getId(), $tncids_and_dates)
      ) {
        return TRUE;
      }
    }
    return FALSE;
  }

  public function acceptTermsAndConditions(DeveloperTnc $tnc, $developer_id, $id = NULL) {
    if (is_null($id)) {
      if (is_null($this->id)) {
        throw new ParameterException('Cannot create developerTnc without a TnC\'s Id.');
      }
      else{
        $id = $this->id;
      }
    }
    $url = '/commerce/organizations/' . rawurlencode($this->client->getOrg()) . '/developers/' . rawurlencode($developer_id). '/tncs/' . rawurlencode($id) . '/developer-tncs';
    $this->client->post($url, $tnc->__toString());
    $tnc = new DeveloperTnc($this->client->getResponse());
    return $tnc;
  }

  public function getId() {
    return $this->id;
  }

  // Used in data load invoked by $this->loadFromRawData()
  private function setId($id) {
    $this->id = $id;
  }

  public function getOrganization() {
    return $this->organization;
  }
  public function setOrganization($organization) {
    $this->organization = $organization;
  }

  public function getStartDate() {
    return $this->start_date;
  }

  public function getFormattedStartDate($format = 'Y-m-d') {
    $start_date = date_create_from_format('Y-m-d', $this->start_date);
    return $start_date->format($format);
  }

  public function setStartDate($date) {
    $start_date = date_create_from_format('Y-m-d H:i:s', $date);
    if ($start_date !== FALSE) {
      $this->start_date = $start_date->format('Y-m-d');
    }
    else {
      throw new ParameterException('Date parameter ' . $date . ' could not be parsed.');
    }
  }

  public function getTncText() {
    return $this->tnc_text;
  }
  public function setTncText($tnc_text) {
    $this->tnc_text = $tnc_text;
  }

  public function getUrl() {
    return $this->url;
  }
  public function setUrl($url) {
    $this->url = $url;
  }

  public function getVersion() {
    return $this->version;
  }

  public function setVersion($version) {
    $this->version = $version;
  }
}