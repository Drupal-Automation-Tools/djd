<?php
require_once (dirname(__FILE__) . '/ManagementAPITestCase.php');

use Apigee\Exceptions\ResponseException as ResponseException;

class DeveloperAppTestCase extends ManagementAPITestCase {

  /**
   * @var Apigee\ManagementAPI\Developer
   */
  private $developer;

  /**
   * @var Apigee\ManagementAPI\DeveloperApp
   */
  private $app;

  public static function getInfo() {
    return array(
      'name' => t('Devconnect Developer App'),
      'description' => t('Tests CRUD operations on Developer Apps.'),
      'group' => t('Devconnect'),
    );
  }

  protected function setUp() {
    parent::setUp();
    $developer = new Apigee\ManagementAPI\Developer($this->client);

    $username = $this->randomName(10);
    $first_name = $this->randomName();
    $last_name = $this->randomName();
    $email = "$username@example.com";

    $developer->setUserName($username);
    $developer->setEmail($email);
    $developer->setFirstName($first_name);
    $developer->setLastName($last_name);
    $developer->setStatus('active');

    $developer->save();
    $this->developer =& $developer;

    $this->app = new Apigee\ManagementAPI\DeveloperApp($this->client, $this->developer);
  }

  protected function tearDown() {
    $this->developer->delete();
    parent::tearDown();
  }

  public function testDeveloperAppList() {
    try {
      $list = $this->app->getList();
    }
    catch (ResponseException $e) {
      $this->fail($e->getMessage());
      return;
    }
    $this->verbose('DeveloperApp list: ' . join(', ', $list));
    if (!is_array($list)) {
      $this->fail('DeveloperApp->getList() did not result in an array.');
      return;
    }
    $this->pass('DeveloperApp->getList() resulted in an array of length ' . count($list));

    try {
      $list = $this->app->getListDetail();
    }
    catch (ResponseException $e) {
      $this->fail($e->getMessage());
      return;
    }
    if (!is_array($list)) {
      $this->fail('DeveloperApp->getListDetail() did not result in an array.');
      return;
    }
    $this->pass('DeveloperApp->getListDetail() resulted in an array of length ' . count($list));
  }

  public function testDeveloperAppCrud() {
    $app =& $this->app;

    $api_product = new Apigee\ManagementAPI\APIProduct($this->client);
    $api_product_list = $api_product->list_products();
    shuffle($api_product_list);

    $app_name = $this->randomName(10);
    $access_type = 'read';
    $callback_url = 'http://' . $this->randomName(16) . '.fake/hello-world';
    $api_products = array($api_product_list[0]);

    // Create app
    $app->setName($app_name);
    $app->setAccessType($access_type);
    $app->setApiProducts($api_products);
    $app->setCallbackUrl($callback_url);
    $app->setAttribute('foo', 'bar');

    try {
      $app->save();
      $this->verbose('App ' . $app_name . ' created');
    }
    catch (ResponseException $e) {
      $this->fail($e->getMessage());
      return;
    }
    $consumer_key = $app->getConsumerKey();
    $consumer_secret = $app->getConsumerSecret();

    // Load app
    $app->blankValues();
    try {
      $app->load($app_name);
      $this->verbose('App ' . $app_name . ' loaded');
    }
    catch (ResponseException $e) {
      $this->fail($e->getMessage());
      return;
    }
    $this->assertEqual($app_name, $app->getName(), 'Name matches');
    $this->assertEqual($access_type, $app->getAccessType(), 'Access type matches');
    $this->assertEqual($api_products, $app->getApiProducts(), 'API Products match');
    $this->assertEqual($callback_url, $app->getCallbackUrl(), 'Callback URL matches');
    $this->assertEqual('bar', $app->getAttribute('foo'), 'Attributes match');
    $new_api_products = $app->getApiProducts();
    if (count($new_api_products) == 1 && $new_api_products[0] == $api_product_list[0]) {
      $this->pass('API Products list matches');
    }
    else {
      $this->fail('API Products list does not match.');
      return;
    }

    // Update app
    $api_products[] = $api_product_list[1];
    $app->setApiProducts($api_products);
    try {
      $app->save();
      $this->verbose('App ' . $app_name . ' updated');
    }
    catch (ResponseException $e) {
      $this->fail($e->getMessage());
      return;
    }
    $this->assertEqual($consumer_key, $app->getConsumerKey(), 'Consumer Key is unchanged');
    $this->assertEqual($consumer_secret, $app->getConsumerSecret(), 'Consumer Secret is unchanged');
    $new_api_products = $app->getApiProducts();
    if (count($new_api_products) == 2 && $new_api_products[0] == $api_product_list[0] && $new_api_products[1] == $api_product_list[1]) {
      $this->pass('API Products list matches');
    }
    else {
      $this->fail('API Products list does not match.');
      return;
    }

    // Try deleting app
    try {
      $app->delete();
      $this->verbose('App ' . $app_name . ' deleted');
    }
    catch (ResponseException $e) {
      $this->fail('Delete failed: ' . $e->getMessage());
      return;
    }
    // Now make sure app is gone
    try {
      $app->load($app_name);
      $this->fail('App ' . $app_name . ' was not successfully deleted.');
      return;
    }
    catch (ResponseException $e) {}

    $this->pass('Developer App successfully created, retrieved, updated and deleted.');
  }

  public function testDeveloperAppKeyCreateDelete() {
    $app =& $this->app;
    $new_key = $this->randomName(24);
    $new_secret = $this->randomName(24);

    try {
      $app->createKey($new_key, $new_secret);
      $this->verbose("Key $new_key created");
      $this->assertEqual($app->getConsumerKey(), $new_key);
      $this->assertEqual($app->getConsumerSecret(), $new_secret);

      $app->deleteKey($new_key);
      $this->verbose("Key $new_key deleted");
      $this->assertNotEqual($app->getConsumerKey(), $new_key);
      $this->assertNotEqual($app->getConsumerSecret(), $new_secret);
    }
    catch (Exception $e) {
      $this->fail($e->getMessage());
    }

  }

  // TODO: Test key approval, revocation, deletion

}