<?php
require_once (dirname(__FILE__) . '/ManagementAPITestCase.php');

use Apigee\Exceptions\ResponseException as ResponseException;

class DeveloperTestCase extends ManagementAPITestCase {

  /**
   * @var Apigee\ManagementAPI\Developer
   */
  private $developer;

  public static function getInfo() {
    return array(
      'name' => t('Devconnect Developer'),
      'description' => t('Tests CRUD operations on Developers.'),
      'group' => t('Devconnect'),
    );
  }

  protected function setUp() {
    parent::setUp();
    $this->developer = new Apigee\ManagementAPI\Developer($this->client);
  }

  public function testDeveloperList() {
    try {
      $list = $this->developer->listDevelopers();
    }
    catch (Exception $e) {
      $this->fail($e->getMessage());
      return;
    }
    $this->verbose('Developer list: ' . join(', ', $list));
    if (!is_array($list)) {
      $this->fail('Developer->listDevelopers() did not result in an array.');
      return;
    }
    $this->pass('Developer->listDevelopers() resulted in an array of length ' . count($list));
  }

  public function testDeveloperCrud() {
    $username = $this->randomName(10);
    $first_name = $this->randomName();
    $last_name = $this->randomName();
    $company = $this->randomName(16);
    $email = "$username@example.com";

    $dev =& $this->developer;

    // Create new developer
    $dev->setFirstName($first_name);
    $dev->setLastName($last_name);
    $dev->setUserName($username);
    $dev->setAttribute('company', $company);
    $dev->setEmail($email);
    $dev->setStatus('active');
    try {
      $dev->save();
      $this->verbose('Developer ' . $email . ' created');
    }
    catch (ResponseException $e) {
      $this->fail('Create failed: ' . $e->getMessage());
      return;
    }

    // Try loading new developer from Management API
    $dev->blankValues();
    try {
      $dev->load($email);
      $this->verbose('Developer ' . $email . ' loaded');
    }
    catch (ResponseException $e) {
      $this->fail('Load failed: ' . $e->getMessage());
      return;
    }
    $this->assertEqual($email, $dev->getEmail(), 'Email matches');
    $this->assertEqual($username, $dev->getUserName(), 'User name matches');
    $this->assertEqual($first_name, $dev->getFirstName(), 'First name matches');
    $this->assertEqual($last_name, $dev->getLastName(), 'Last name matches');
    $this->assertTrue(($dev->getAttribute('company') == $company), 'Company matches');

    // Try updating developer
    $new_last_name = str_rot13($dev->getLastName());
    $dev->setLastName($new_last_name);
    try {
      $dev->save();
      $this->verbose('Developer ' . $email . ' updated');
    }
    catch (ResponseException $e) {
      $this->fail('Update failed: ' . $e->getMessage());
      return;
    }
    // reload from API and make sure changes stick.
    $dev->blankValues();
    $dev->load($email);
    $this->assertEqual($new_last_name, $dev->getLastName(), 'Updated last name matches');

    // Try deleting developer
    try {
      $dev->delete($email);
      $this->verbose('Developer ' . $email . ' deleted');
    }
    catch (ResponseException $e) {
      $this->fail('Delete failed: ' . $e->getMessage());
    }
    // Now make sure dev is gone
    try {
      $dev->load($email);
      $this->fail('Developer ' . $email . ' was not successfully deleted.');
      return;
    }
    catch (ResponseException $e) {}

    $this->pass('Developer successfully created, retrieved, updated and deleted.');
  }

}