<?php
/**
 * @file
 *  Augments Drupal's basic user functionality to handle extra
 *  API-interfacing functionality.
 */

use Apigee\Util\Log;

/**
 * Implements hook_permission().
 *
 * @return array
 */
function devconnect_user_permission() {
  return array(
    "administer devconnect_user settings" => array(
      "title" => t("Administer DevConnect Developers."),
      "description" => t("Perform administration tasks for Apigee DevConnect Developers.")
    )
  );
}

/**
 * Implements hook_menu().
 *
 * @return array
 */
function devconnect_user_menu() {
  $items = array();

  $items['admin/people/sync'] = array(
    'title' => 'DevConnect Developer Sync',
    'page callback' => 'devconnect_user_sync',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'api_products',
  );

  $items['admin/config/people/attributes'] = array(
    'title' => 'DevConnect User Attributes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_user_attributes_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function devconnect_user_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_profile_form':
      // Breadcrumb navigation
      $breadcrumb[] = l(t('Home'), NULL);
      $breadcrumb[] = l($form['#user']->name, 'user');
      drupal_set_title('Edit Profile');
      drupal_set_breadcrumb($breadcrumb);

      // Add a link to openid admin page only if the openid and apigee_sso modules are enabled
      if (module_exists('openid') && module_exists('apigee_sso')) {
        $form['openid'] = array(
          '#markup' => '<div class="control-group form-openid"><div class="control-label" style="margin-bottom: 5px;">OpenID</div><div class="controls"><a href="/user/me/openid">Manage your OpenIDs</a></div></div>',
          '#weight' => 2,
        );
        return $form;
        break;
      }

    case "user_register_form":
      drupal_add_css(drupal_get_path('module', 'devconnect_user') . '/devconnect_user.css',
        array('group' => CSS_THEME, 'every_page' => TRUE)
      );
      $form['picture']['#weight'] = -99;
      $form['field_first_name']['#weight'] = -98;
      $form['field_last_name']['#weight'] = -97;
      $form['field_company_name']['#weight'] = -96;
      $form['field_terms_and_conditions']['#prefix'] = '<div id="terms-field">';
      $form['field_terms_and_conditions']['#suffix'] = '</div>';
      $form['field_terms_and_conditions'][LANGUAGE_NONE]['#title'] = t('I agree to the <a href="@url" target="_blank">Terms of Use</a>', array('@url' => url('basic-page/terms-use')));
      break;
  }
}

/**
 * Form constructor to administer user attributes persisted to KMS
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function devconnect_user_attributes_form($form, &$form_state) {
  $fields = field_info_instances('user', 'user');
  if (isset($fields['field_first_name'])) {
    unset($fields['field_first_name']);
  }
  if (isset($fields['field_last_name'])) {
    unset($fields['field_last_name']);
  }

  $default_values = variable_get('devconnect_user_attributes_to_persist_in_kms', array());

  $form['kms_persisted_user_attribute'] = array(
    '#tree' => FALSE,
    '#title' => t('User attributes to be persisted to KMS'),
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
  );

  foreach ($fields as $field_name => $field_data) {
    $field_name = preg_replace('!^field_!', '', $field_name);

    $form['kms_persisted_user_attribute'][$field_name] = array(
      '#tree' => FALSE,
      '#type' => 'fieldset',
      '#title' => $field_data['label'],
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['kms_persisted_user_attribute'][$field_name]["kms_internal_attribute_selected_$field_name"] = array(
      '#title' => t('Persist attribute in KMS?'),
      '#type' => 'checkbox',
      '#default_value' => isset($default_values[$field_name]["selected"]) ? $default_values[$field_name]["selected"] : FALSE,
    );

    $form['kms_persisted_user_attribute'][$field_name]["kms_internal_attribute_name_$field_name"] = array(
      '#title' => t('KMS Attribute Name'),
      '#type' => 'textfield',
      '#default_value' => isset($default_values[$field_name]["kms_internal_attribute_name"]) ? $default_values[$field_name]["kms_internal_attribute_name"] : NULL,
    );

    $form['kms_persisted_user_attribute'][$field_name]["kms_attribute_empty_action_$field_name"] = array (
      '#title' => t('If Attribute Is Empty'),
      '#type' => 'radios',
      '#options' => array(
        'default' => t('Send default value'),
        'null' => t('Send NULL'),
        'empty' => t('Send Empty String'),
        'avoid' => t('Do Not Send'),
      ),
      '#default_value' => isset($default_values[$field_name]["empty_action"]) ? $default_values[$field_name]["empty_action"] : 'null',
    );

    $form['kms_persisted_user_attribute'][$field_name]["kms_attribute_set_to_string_boolean_$field_name"] = array (
      '#title' => t('Convert to true|false string'),
      '#type' => 'checkbox',
      '#description' => t('Value to be sent to KMS will be set as (field_value ? \'true\' : \'false\')'),
      '#default_value' => isset($default_values[$field_name]["convert_to_boolean_string_value"]) ? $default_values[$field_name]["convert_to_boolean_string_value"] : FALSE,
    );
  }

  $form['devconnect_user_attributes_to_persist_in_kms'] = array(
      '#type' => 'value',
      '#value' => $default_values,
  );

  return system_settings_form($form);
}

/**
 * Validator for devconnect_user_attributes_form.
 *
 * This doesn't actually validate the form, but rather converts the array
 * to a sensible numeric array prior to saving in the database.
 *
 * @param $form
 * @param $form_state
 */
function devconnect_user_attributes_form_validate($form, &$form_state) {
  $default_values = array();
  foreach($form_state['values'] as $input => $value) {
    if (strpos($input, 'kms_internal_attribute_selected_') === 0) {
      $field_name = substr($input, 32);
      $default_values[$field_name] = array(
        'selected' => $form_state['values']["kms_internal_attribute_selected_$field_name"],
        'kms_internal_attribute_name' => $form_state['values']["kms_internal_attribute_name_$field_name"],
        'empty_action' => $form_state['values']["kms_attribute_empty_action_$field_name"],
        'convert_to_boolean_string_value' => $form_state['values']["kms_attribute_set_to_string_boolean_$field_name"],
      );
      unset($form_state['values']["kms_internal_attribute_selected_$field_name"]);
    }
    else if (strpos($input, 'kms_internal_attribute_name_') === 0) {
      unset($form_state['values']["kms_internal_attribute_name_$field_name"]);
    }
    unset($form_state['values']["kms_attribute_empty_action_$field_name"]);
    unset($form_state['values']["kms_attribute_set_to_string_boolean_$field_name"]);
  }
  $form_state['values']['devconnect_user_attributes_to_persist_in_kms'] = $default_values;
}

/**
 * Implements hook_user_presave().
 *
 * @param $edit
 * @param $account
 * @param $category
 */
function devconnect_user_user_presave(&$edit, $account, $category) {

  if ($account->is_new) {
    $action = 'create';
    $force_update = FALSE;
  }
  else {
    $action = 'update';
    $force_update = TRUE;
  }

  $first_name = (isset($edit['field_first_name'][LANGUAGE_NONE][0]['value']) ? $edit['field_first_name'][LANGUAGE_NONE][0]['value'] : $account->field_first_name[LANGUAGE_NONE][0]['value']);
  $last_name = (isset($edit['field_last_name'][LANGUAGE_NONE][0]['value']) ? $edit['field_last_name'][LANGUAGE_NONE][0]['value'] : $account->field_last_name[LANGUAGE_NONE][0]['value']);
  $mail = (isset($edit['mail']) ? $edit['mail'] : $account->mail);
  $name = (isset($edit['name']) ? $edit['name'] : $account->name);


  $client = devconnect_default_api_client();
  $dev = new Apigee\ManagementAPI\Developer($client);

  if (!$account->is_new) {
    $dev->load($mail);
  }
  $dev->setEmail($mail);
  $dev->setUserName($name);
  if (!empty($first_name)) {
    $dev->setFirstName($first_name);
  }
  if (!empty($last_name)) {
    $dev->setLastName($last_name);
  }

  $fields = variable_get('devconnect_user_attributes_to_persist_in_kms', array());
  foreach($fields as $field_name => $field_specs) {
    $field_full_name = 'field_' . $field_name;
    if ($field_specs['selected']) {
      $att_name = $field_specs['kms_internal_attribute_name'];

      // If value was in edit form, grab it
      if (array_key_exists($field_full_name, $edit)) {
        $field_obj = $edit[$field_full_name];
        $field_value = (isset($field_obj[LANGUAGE_NONE][0]['value']) ? $field_obj[LANGUAGE_NONE][0]['value'] : '');
      }
      // If not in edit form, get it from user object if it is set
      else {
        if (is_array($account->$field_full_name) && count($account->$field_full_name) > 0) {
          $field_obj = $account->$field_full_name;
          $field_value = $field_obj[LANGUAGE_NONE][0]['value'];
        }
        // Neither in form nor in user object, set it to null and let logic below deal with it
        else {
          $field_value = NULL;
        }
      }

      if (strlen($field_value) === 0) {
        switch($field_specs['empty_action']) {
          case 'null':
            $dev->setAttribute($att_name, NULL);
            break;
          case 'empty':
            $dev->setAttribute($att_name, '');
            break;
          case 'default':
            $field = field_info_instance('user', $field_full_name, 'user');
            $default_value = isset($field['default_value'][0]['value']) ? $field['default_value'][0]['value'] : NULL;
            if ($field_specs['convert_to_boolean_string_value']) {
              $default_value = $default_value ? true : false;
            }
            $dev->setAttribute($att_name, _devconnect_user_scrub_attribute($default_value));
            break;
          case 'avoid': //Attribute is not to be sent
        }
      }
      else {
        $field_value = _devconnect_user_scrub_attribute($field_value);
        if ($field_specs['convert_to_boolean_string_value']) {
          $field_value = $field_value ? true : false;
        }
        $dev->setAttribute($att_name, _devconnect_user_scrub_attribute($field_value));
      }
    }
  }

  // Bring in any attributes that were defined by other hook_user_presave() implementations
  foreach ($edit as $key => $field_value) {
    if (substr($key, 0, 10) == 'attribute_') {
      $field = substr($key, 10);
      $field_value = _devconnect_user_scrub_attribute($field_value);
      $dev->setAttribute($field, $field_value);
    }
  }

  $dev->setStatus($account->status || $edit['status'] ? 'active' : 'inactive');

  try {
    $dev->save($force_update);
    $results = $dev->getDebugData();
  }
  catch (Exception $e) {
    $results = $dev->getDebugData();
    Log::write('devconnect_user', Log::LOGLEVEL_ERROR, print_r($results, TRUE));

    if (user_access('administer users')) {
      $error = '<h4>STATUS: ' . $results['code'] . ' ' . $results['code_status'] . '; '
        . 'Communication with the Apigee endpoint is compromised. Cannot ' . $action . ' user.</h4>';
      if (function_exists('kpr')) {
        $error .= kpr($results, TRUE);
      }
      else {
        $error .= '<pre>' . print_r($results, TRUE) . '</pre>';
      }
      drupal_set_message($error, 'error');
    }
  }

  foreach (module_implements('devconnect_user_save') as $module) {
    $function = $module . '_devconnect_user_save';
    $function($results, $edit, $account);
  }
  Log::write('devconnect_user', Log::LOGLEVEL_DEBUG, print_r($results, TRUE));
}

function _devconnect_user_scrub_attribute($field_value) {
  if (is_object($field_value) || is_array($field_value)) {
    $field_value = json_encode($field_value);
  }
  // Booleans are saved as their string value
  elseif($field_value === TRUE) {
    $field_value = 'true';
  }
  elseif($field_value === FALSE) {
    $field_value = 'false';
  }
  // Force ints/floats to string too
  else {
    $field_value = (string)$field_value;
  }
  return $field_value;
}

/**
 * Implements hook_user_delete().
 *
 * @param $account
 */
function devconnect_user_user_delete($account) {
  $client = devconnect_default_api_client();
  $dev = new Apigee\ManagementAPI\Developer($client);
  $log_level = Log::LOGLEVEL_DEBUG;
  try {
    $dev->delete($account->mail);
  }
  catch (Exception $e) {
    $log_level = Log::LOGLEVEL_ERROR;
  }
  $results = $dev->getDebugData();
  Log::write('devconnect_user', $log_level, print_r($results, TRUE));
  module_invoke_all('devconnect_user_delete', $results, $account);
}

/**
 * Page callback for DevConnect Developer Sync.
 *
 * Makes sure that all local users have a corresponding account on the API server.
 *
 * @return string
 */
function devconnect_user_sync() {
  $list_items = array();

  $users = db_select('users', 'u')
    ->fields('u', array('uid', 'mail'))
    ->condition('u.uid', 0, '>')
    ->execute()
    ->fetchAll(PDO::FETCH_OBJ);

  $client = devconnect_default_api_client();
  $dev = new Apigee\ManagementAPI\Developer($client);

  foreach ($users as $user) {
    if ($dev->validate($user->mail)) {
      $list_items[] = 'User ' . $user->mail . ' already exists on server.';
    }
    else {
      $account = user_load($user->uid);
      $dev->blankValues();
      $dev->populateFromUserAccount($account);
      try {
        $dev->save();
        $list_items[] = 'User ' . $account->name . ' created on server';
      }
      catch (Exception $e) {
        $list_items[] = 'User ' . $account->name . ' not created on server. ' . $e->getMessage()
          . (function_exists('kpr') ? kpr($dev->get_debug_data(), TRUE) : '<pre>' . print_r($dev->get_debug_data(), TRUE) . '</pre>');
      }
    }
  }

  $list_params = array(
    'items' => $list_items,
    'title' => NULL,
    'type' => 'ul',
    'attributes' => array()
  );

  return theme('item_list', $list_params);
}

/**
 * Treat all user pages as not administrative
 */
function devconnect_user_admin_paths_alter(&$paths) {
  $paths['user/*'] = FALSE;
}

/**
 * Implements hook_redirect_alter
 */
function devconnect_user_redirect_alter(&$redirect){
  global $user;
  // Only act if user token in redirect path
  if(!empty($redirect->redirect) && strpos($redirect->redirect, '[user') !== FALSE){
    if(!user_is_logged_in()) {
      // Bounce via login back to source path
      $redirect->redirect = 'user/login';
      $redirect->redirect_options['query'] = array('destination' => $redirect->source);
    }else{
      // Apply user tokens to redirect path
      $redirect->redirect = token_replace($redirect->redirect, array('user' => $user));
    }
  }
}

/**
 * Checks to see if developer_id has been set in $_SESSION. If not, we look
 * it up in KMS and set it.
 *
 * @param stdClass $user
 * @return string|bool
 */
function devconnect_user_get_developer_id($user) {
  if (!isset($_SESSION['developer_id'])) {
    $client = devconnect_default_api_client();
    $dev = new Apigee\ManagementAPI\Developer($client);
    try {
      $dev->load($user->mail);
      $_SESSION['developer_id'] = $dev->getDeveloperId();
    }
    catch (Exception $e) {
      return FALSE;
    }
  }
  return $_SESSION['developer_id'];
}
